{"version":3,"sources":["MintCountdown.tsx","MintButton.tsx","Home.tsx","components/Navbar.tsx","components/OurVision.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts","connection.tsx","candy-machine.ts"],"names":["useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","done","marginBottom","fontWeight","item","MintCountdown","date","status","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","CTAButton","styled","Button","MintButton","onMint","candyMachine","isMinting","setIsMinting","isActive","wallet","useWallet","connection","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","useEffect","mint","a","removeAccountChangeListener","previousGatewayStatus","value","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","state","console","log","disabled","onClick","gatekeeper","network","gatekeeperNetwork","toBase58","ACTIVE","findGatewayToken","publicKey","gatewayToken","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","Error","variant","isSoldOut","CircularProgress","isPresale","isWhitelistOnly","ConnectButton","WalletDialogButton","MintContainer","div","getCountdownDate","endSettings","endSettingType","toDate","number","goLiveDate","anchor","Date","getTime","undefined","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","message","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","anchorWallet","useMemo","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","candyMachineId","getCandyMachineState","cndy","active","toNumber","presale","whitelistMintSettings","PublicKey","getAtaForMint","token","getTokenAccountBalance","balance","valid","parseInt","amount","limit","Math","min","itemsAvailable","itemsRedeemed","getCollectionPDA","collectionPDA","program","provider","getAccountInfo","collectionPDAAccount","txnEstimate","retainAuthority","tokenMint","mode","burnEveryTime","expireOnUse","noHide","startsWith","beforeTransactions","afterTransactions","document","getElementById","click","connected","createAccountsForMint","setupMint","err","transaction","awaitTransactionSignatureConfirmation","txTimeout","mintOneToken","mintOne","mintTxId","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","GiraffeWGif","Container","marginTop","maxWidth","position","src","alt","paddingBottom","backgroundColor","Grid","container","direction","wrap","xs","Typography","formatNumber","asNumber","price","align","CANDY_MACHINE_PROGRAM","clusterUrl","handleTransaction","signatures","sig","equals","sendTransaction","error","broadcastTransaction","options","autoShowModal","val","Snackbar","autoHideDuration","onClose","Alert","Title","Link","Navbar","href","ListItem","BigTitle","UnderTitle","Roadmap","OurVision","id","createTheme","palette","type","process","e","getCandyMachineId","Connection","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","CIVIC","buyer","findProgramAddress","toBuffer","TOKEN_PROGRAM_ID","getNetworkExpire","Buffer","from","getNetworkToken","SequenceType","getErrorForTransaction","txid","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","forEach","m","regex","exec","index","lastIndex","length","push","sendTransactions","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","instructions","signers","Transaction","instruction","add","recentBlockhash","blockhash","setSigners","map","s","partialSign","partiallySignedTransactions","filter","t","fullySignedTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","slot","StopOnFailure","Promise","all","txs","result","awaitConfirmation","includesFeePayer","rawTransaction","serialize","skipPreflight","sendRawTransaction","confirmation","getUnixTs","timeout","startTime","sleep","simulateResult","simulateTransaction","logs","line","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","queryStatus","confirmations","subId","resolve","reject","setTimeout","onSignature","context","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms","TOKEN_METADATA_PROGRAM_ID","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","preflightCommitment","fetchIdl","idl","account","fetch","authority","treasury","hiddenSettings","getMasterEdition","getMetadata","getCandyMachineCreator","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","Keypair","generate","userTokenAccountAddress","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","userTokenAccount","setupState","userPayingAccountAddress","remainingAccounts","cleanupInstructions","whitelistToken","whitelistBurnAuthority","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","rm","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix"],"mappings":"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","file":"static/js/main.2a8345bc.chunk.js","sourcesContent":["import { Paper } from '@material-ui/core';\r\nimport Countdown from 'react-countdown';\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n      padding: theme.spacing(0),\r\n      '& > *': {\r\n        margin: theme.spacing(0.4),\r\n        width: theme.spacing(6),\r\n        height: theme.spacing(6),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignContent: 'center',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        background: '#384457',\r\n        color: 'white',\r\n        borderRadius: 5,\r\n        fontSize: 10,\r\n      },\r\n    },\r\n    done: {\r\n      display: 'flex',\r\n      margin: 0,\r\n      marginBottom: theme.spacing(0.5),\r\n      height: theme.spacing(3.5),\r\n      padding: theme.spacing(1),\r\n      flexDirection: 'column',\r\n      alignContent: 'center',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      background: '#384457',\r\n      color: 'white',\r\n      borderRadius: 5,\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n    },\r\n    item: {\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n    },\r\n  }),\r\n);\r\n\r\ninterface MintCountdownProps {\r\n  date: Date | undefined;\r\n  style?: React.CSSProperties;\r\n  status?: string;\r\n  onComplete?: () => void;\r\n}\r\n\r\ninterface MintCountdownRender {\r\n  days: number;\r\n  hours: number;\r\n  minutes: number;\r\n  seconds: number;\r\n  completed: boolean;\r\n}\r\n\r\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\r\n  date,\r\n  status,\r\n  style,\r\n  onComplete,\r\n}) => {\r\n  const classes = useStyles();\r\n  const renderCountdown = ({\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n    completed,\r\n  }: MintCountdownRender) => {\r\n    hours += days * 24;\r\n    if (completed) {\r\n      return status ? <span className={classes.done}>{status}</span> : null;\r\n    } else {\r\n      return (\r\n        <div className={classes.root} style={style}>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {hours < 10 ? `0${hours}` : hours}\r\n            </span>\r\n            <span>hrs</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {minutes < 10 ? `0${minutes}` : minutes}\r\n            </span>\r\n            <span>mins</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {seconds < 10 ? `0${seconds}` : seconds}\r\n            </span>\r\n            <span>secs</span>\r\n          </Paper>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  if (date) {\r\n    return (\r\n      <Countdown\r\n        date={date}\r\n        onComplete={onComplete}\r\n        renderer={renderCountdown}\r\n      />\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","import styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport { CandyMachineAccount } from './candy-machine';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\r\nimport {\r\n  findGatewayToken,\r\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\r\n  onGatewayTokenChange,\r\n  removeAccountChangeListener,\r\n} from '@identity.com/solana-gateway-ts';\r\n\r\nexport const CTAButton = styled(Button)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: #604ae5;\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`; // add your own styles here\r\n\r\nexport const MintButton = ({\r\n  onMint,\r\n  candyMachine,\r\n  isMinting,\r\n  setIsMinting,\r\n  isActive,\r\n}: {\r\n  onMint: () => Promise<void>;\r\n  candyMachine?: CandyMachineAccount;\r\n  isMinting: boolean;\r\n  setIsMinting: (val: boolean) => void;\r\n  isActive: boolean;\r\n}) => {\r\n  const wallet = useWallet();\r\n  const connection = useConnection();\r\n  const [verified, setVerified] = useState(false);\r\n  const { requestGatewayToken, gatewayStatus } = useGateway();\r\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\r\n  const [clicked, setClicked] = useState(false);\r\n\r\n  const getMintButtonContent = () => {\r\n    if (candyMachine?.state.isSoldOut) {\r\n      return 'SOLD OUT';\r\n    } else if (isMinting) {\r\n      return <CircularProgress />;\r\n    } else if (\r\n      candyMachine?.state.isPresale ||\r\n      candyMachine?.state.isWhitelistOnly\r\n    ) {\r\n      return 'WHITELIST MINT';\r\n    }\r\n\r\n    return 'MINT';\r\n  };\r\n\r\n  useEffect(() => {\r\n    const mint = async () => {\r\n      await removeAccountChangeListener(\r\n        connection.connection,\r\n        webSocketSubscriptionId,\r\n      );\r\n      await onMint();\r\n\r\n      setClicked(false);\r\n      setVerified(false);\r\n    };\r\n    if (verified && clicked) {\r\n      mint();\r\n    }\r\n  }, [\r\n    verified,\r\n    clicked,\r\n    connection.connection,\r\n    onMint,\r\n    webSocketSubscriptionId,\r\n  ]);\r\n\r\n  const previousGatewayStatus = usePrevious(gatewayStatus);\r\n  useEffect(() => {\r\n    const fromStates = [\r\n      GatewayStatus.NOT_REQUESTED,\r\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\r\n    ];\r\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\r\n    if (\r\n      fromStates.find(state => previousGatewayStatus === state) &&\r\n      !invalidToStates.find(state => gatewayStatus === state)\r\n    ) {\r\n      setIsMinting(true);\r\n    }\r\n    console.log('change: ', gatewayStatus);\r\n  }, [setIsMinting, previousGatewayStatus, gatewayStatus]);\r\n\r\n  return (\r\n    <CTAButton\r\n      disabled={isMinting || !isActive}\r\n      onClick={async () => {\r\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\r\n          const network =\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\r\n          if (network === 'ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6') {\r\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\r\n              await onMint();\r\n            } else {\r\n              // setIsMinting(true);\r\n              await requestGatewayToken();\r\n              console.log('after: ', gatewayStatus);\r\n            }\r\n          } else if (\r\n            network === 'ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE' ||\r\n            network === 'tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt'\r\n          ) {\r\n            setClicked(true);\r\n            const gatewayToken = await findGatewayToken(\r\n              connection.connection,\r\n              wallet.publicKey!,\r\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n            );\r\n\r\n            if (gatewayToken?.isValid()) {\r\n              await onMint();\r\n            } else {\r\n              window.open(\r\n                `https://verify.encore.fans/?gkNetwork=${network}`,\r\n                '_blank',\r\n              );\r\n\r\n              const gatewayTokenAddress =\r\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\r\n                  wallet.publicKey!,\r\n                  candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n                );\r\n\r\n              setWebSocketSubscriptionId(\r\n                onGatewayTokenChange(\r\n                  connection.connection,\r\n                  gatewayTokenAddress,\r\n                  () => setVerified(true),\r\n                  'confirmed',\r\n                ),\r\n              );\r\n            }\r\n          } else {\r\n            setClicked(false);\r\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\r\n          }\r\n        } else {\r\n          await onMint();\r\n          setClicked(false);\r\n        }\r\n      }}\r\n      variant=\"contained\"\r\n    >\r\n      {getMintButtonContent()}\r\n    </CTAButton>\r\n  );\r\n};\r\n\r\nfunction usePrevious<T>(value: T): T | undefined {\r\n  const ref = useRef<T>();\r\n  useEffect(() => {\r\n    ref.current = value;\r\n  }, [value]);\r\n  return ref.current;\r\n}\r\n","import { useEffect, useMemo, useState, useCallback } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\n\r\nimport styled from 'styled-components';\r\nimport { Container, Snackbar } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { PublicKey, Transaction } from '@solana/web3.js';\r\nimport { useWallet } from '@solana/wallet-adapter-react';\r\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CandyMachineAccount,\r\n  CANDY_MACHINE_PROGRAM,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n  getCollectionPDA,\r\n  SetupState,\r\n  createAccountsForMint,\r\n} from './candy-machine';\r\nimport { AlertState, toDate, formatNumber, getAtaForMint } from './utils';\r\nimport { MintCountdown } from './MintCountdown';\r\nimport { MintButton } from './MintButton';\r\nimport { GatewayProvider } from '@civic/solana-gateway-react';\r\nimport { sendTransaction } from './connection';\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MintContainer = styled.div``; // add your owns styles here\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [isUserMinting, setIsUserMinting] = useState(false);\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: '',\r\n    severity: undefined,\r\n  });\r\n\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [endDate, setEndDate] = useState<Date>();\r\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\r\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\r\n  const [isPresale, setIsPresale] = useState(false);\r\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\r\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\r\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\r\n\r\n  const rpcUrl = props.rpcHost;\r\n  const wallet = useWallet();\r\n\r\n  const anchorWallet = useMemo(() => {\r\n    if (\r\n      !wallet ||\r\n      !wallet.publicKey ||\r\n      !wallet.signAllTransactions ||\r\n      !wallet.signTransaction\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return {\r\n      publicKey: wallet.publicKey,\r\n      signAllTransactions: wallet.signAllTransactions,\r\n      signTransaction: wallet.signTransaction,\r\n    } as anchor.Wallet;\r\n  }, [wallet]);\r\n\r\n  const refreshCandyMachineState = useCallback(async () => {\r\n    if (!anchorWallet) {\r\n      return;\r\n    }\r\n\r\n    if (props.candyMachineId) {\r\n      try {\r\n        const cndy = await getCandyMachineState(\r\n          anchorWallet,\r\n          props.candyMachineId,\r\n          props.connection,\r\n        );\r\n        let active =\r\n          cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\r\n        let presale = false;\r\n        // whitelist mint?\r\n        if (cndy?.state.whitelistMintSettings) {\r\n          // is it a presale mint?\r\n          if (\r\n            cndy.state.whitelistMintSettings.presale &&\r\n            (!cndy.state.goLiveDate ||\r\n              cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\r\n          ) {\r\n            presale = true;\r\n          }\r\n          // is there a discount?\r\n          if (cndy.state.whitelistMintSettings.discountPrice) {\r\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\r\n          } else {\r\n            setDiscountPrice(undefined);\r\n            // when presale=false and discountPrice=null, mint is restricted\r\n            // to whitelist users only\r\n            if (!cndy.state.whitelistMintSettings.presale) {\r\n              cndy.state.isWhitelistOnly = true;\r\n            }\r\n          }\r\n          // retrieves the whitelist token\r\n          const mint = new anchor.web3.PublicKey(\r\n            cndy.state.whitelistMintSettings.mint,\r\n          );\r\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\r\n\r\n          try {\r\n            const balance = await props.connection.getTokenAccountBalance(\r\n              token,\r\n            );\r\n            let valid = parseInt(balance.value.amount) > 0;\r\n            // only whitelist the user if the balance > 0\r\n            setIsWhitelistUser(valid);\r\n            active = (presale && valid) || active;\r\n          } catch (e) {\r\n            setIsWhitelistUser(false);\r\n            // no whitelist user, no mint\r\n            if (cndy.state.isWhitelistOnly) {\r\n              active = false;\r\n            }\r\n            console.log('There was a problem fetching whitelist token balance');\r\n            console.log(e);\r\n          }\r\n        }\r\n        // datetime to stop the mint?\r\n        if (cndy?.state.endSettings?.endSettingType.date) {\r\n          setEndDate(toDate(cndy.state.endSettings.number));\r\n          if (\r\n            cndy.state.endSettings.number.toNumber() <\r\n            new Date().getTime() / 1000\r\n          ) {\r\n            active = false;\r\n          }\r\n        }\r\n        // amount to stop the mint?\r\n        if (cndy?.state.endSettings?.endSettingType.amount) {\r\n          let limit = Math.min(\r\n            cndy.state.endSettings.number.toNumber(),\r\n            cndy.state.itemsAvailable,\r\n          );\r\n          if (cndy.state.itemsRedeemed < limit) {\r\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\r\n          } else {\r\n            setItemsRemaining(0);\r\n            cndy.state.isSoldOut = true;\r\n          }\r\n        } else {\r\n          setItemsRemaining(cndy.state.itemsRemaining);\r\n        }\r\n\r\n        if (cndy.state.isSoldOut) {\r\n          active = false;\r\n        }\r\n\r\n        const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\r\n        const collectionPDAAccount =\r\n          await cndy.program.provider.connection.getAccountInfo(collectionPDA);\r\n\r\n        setIsActive((cndy.state.isActive = active));\r\n        setIsPresale((cndy.state.isPresale = presale));\r\n        setCandyMachine(cndy);\r\n\r\n        const txnEstimate =\r\n          892 +\r\n          (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\r\n          (cndy.state.tokenMint ? 177 : 0) +\r\n          (cndy.state.whitelistMintSettings ? 33 : 0) +\r\n          (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 145 : 0) +\r\n          (cndy.state.gatekeeper ? 33 : 0) +\r\n          (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\r\n\r\n        setNeedTxnSplit(txnEstimate > 1230);\r\n      } catch (e) {\r\n        if (e instanceof Error) {\r\n          if (e.message === `Account does not exist ${props.candyMachineId}`) {\r\n            setAlertState({\r\n              open: true,\r\n              message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\r\n              severity: 'error',\r\n              noHide: true,\r\n            });\r\n          } else if (e.message.startsWith('failed to get info about account')) {\r\n            setAlertState({\r\n              open: true,\r\n              message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\r\n              severity: 'error',\r\n              noHide: true,\r\n            });\r\n          }\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: `${e}`,\r\n            severity: 'error',\r\n            noHide: true,\r\n          });\r\n        }\r\n        console.log(e);\r\n      }\r\n    } else {\r\n      setAlertState({\r\n        open: true,\r\n        message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\r\n        severity: 'error',\r\n        noHide: true,\r\n      });\r\n    }\r\n  }, [anchorWallet, props.candyMachineId, props.connection, props.rpcHost]);\r\n\r\n  const onMint = async (\r\n    beforeTransactions: Transaction[] = [],\r\n    afterTransactions: Transaction[] = [],\r\n  ) => {\r\n    try {\r\n      setIsUserMinting(true);\r\n      document.getElementById('#identity')?.click();\r\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n        let setupMint: SetupState | undefined;\r\n        if (needTxnSplit && setupTxn === undefined) {\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Please sign account setup transaction',\r\n            severity: 'info',\r\n          });\r\n          setupMint = await createAccountsForMint(\r\n            candyMachine,\r\n            wallet.publicKey,\r\n          );\r\n          let status: any = { err: true };\r\n          if (setupMint.transaction) {\r\n            status = await awaitTransactionSignatureConfirmation(\r\n              setupMint.transaction,\r\n              props.txTimeout,\r\n              props.connection,\r\n              true,\r\n            );\r\n          }\r\n          if (status && !status.err) {\r\n            setSetupTxn(setupMint);\r\n            setAlertState({\r\n              open: true,\r\n              message:\r\n                'Setup transaction succeeded! Please sign minting transaction',\r\n              severity: 'info',\r\n            });\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: 'Mint failed! Please try again!',\r\n              severity: 'error',\r\n            });\r\n            setIsUserMinting(false);\r\n            return;\r\n          }\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Please sign minting transaction',\r\n            severity: 'info',\r\n          });\r\n        }\r\n\r\n        let mintOne = await mintOneToken(\r\n          candyMachine,\r\n          wallet.publicKey,\r\n          beforeTransactions,\r\n          afterTransactions,\r\n          setupMint ?? setupTxn,\r\n        );\r\n        const mintTxId = mintOne[0];\r\n\r\n        let status: any = { err: true };\r\n        if (mintTxId) {\r\n          status = await awaitTransactionSignatureConfirmation(\r\n            mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            true,\r\n          );\r\n        }\r\n\r\n        if (status && !status.err) {\r\n          // manual update since the refresh might not detect\r\n          // the change immediately\r\n          let remaining = itemsRemaining! - 1;\r\n          setItemsRemaining(remaining);\r\n          setIsActive((candyMachine.state.isActive = remaining > 0));\r\n          candyMachine.state.isSoldOut = remaining === 0;\r\n          setSetupTxn(undefined);\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Congratulations! Mint succeeded!',\r\n            severity: 'success',\r\n          });\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Mint failed! Please try again!',\r\n            severity: 'error',\r\n          });\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      let message = error.msg || 'Minting failed! Please try again!';\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = 'Transaction timeout! Please try again.';\r\n        } else if (error.message.indexOf('0x137')) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf('0x135')) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n          window.location.reload();\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: 'error',\r\n      });\r\n      // updates the candy machine state to reflect the latest\r\n      // information on chain\r\n      refreshCandyMachineState();\r\n    } finally {\r\n      setIsUserMinting(false);\r\n    }\r\n  };\r\n\r\n  const toggleMintButton = () => {\r\n    let active = !isActive || isPresale;\r\n\r\n    if (active) {\r\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\r\n        active = false;\r\n      }\r\n      if (endDate && Date.now() >= endDate.getTime()) {\r\n        active = false;\r\n      }\r\n    }\r\n\r\n    if (\r\n      isPresale &&\r\n      candyMachine!.state.goLiveDate &&\r\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\r\n    ) {\r\n      setIsPresale((candyMachine!.state.isPresale = false));\r\n    }\r\n\r\n    setIsActive((candyMachine!.state.isActive = active));\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshCandyMachineState();\r\n  }, [\r\n    anchorWallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    refreshCandyMachineState,\r\n  ]);\r\nconst GiraffeWGif = styled(\"img\")`\r\nwidth :100%;\r\nheight: 400px;\r\nobject-position: top;\r\nmargin-bottom: 30px;\r\nborder-radius:10%;\r\n`\r\n  return (\r\n    <Container style={{ marginTop: 100 }}>\r\n      <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\r\n        \r\n        <GiraffeWGif src=\"/GiraffeGif.GIF\" alt =\"giraffegif\"/>\r\n        <Paper\r\n          style={{\r\n            padding: 24,\r\n            paddingBottom: 10,\r\n            backgroundColor: '#FFA500',\r\n            borderRadius: 6,\r\n          }}\r\n        >\r\n          {!wallet.connected ? (\r\n            <ConnectButton>Connect Wallet</ConnectButton>\r\n          ) : (\r\n            <>\r\n              {candyMachine && (\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justifyContent=\"center\"\r\n                  wrap=\"nowrap\"\r\n                >\r\n                  <Grid item xs={3}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      Remaining\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      color=\"textPrimary\"\r\n                      style={{\r\n                        fontWeight: 'bold',\r\n                      }}\r\n                    >\r\n                      {`${itemsRemaining}`}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      {isWhitelistUser && discountPrice\r\n                        ? 'Discount Price'\r\n                        : 'Price'}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      color=\"textPrimary\"\r\n                      style={{ fontWeight: 'bold' }}\r\n                    >\r\n                      {isWhitelistUser && discountPrice\r\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\r\n                        : `◎ ${formatNumber.asNumber(\r\n                            candyMachine.state.price,\r\n                          )}`}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={5}>\r\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\r\n                      <>\r\n                        <MintCountdown\r\n                          key=\"endSettings\"\r\n                          date={getCountdownDate(candyMachine)}\r\n                          style={{ justifyContent: 'flex-end' }}\r\n                          status=\"COMPLETED\"\r\n                          onComplete={toggleMintButton}\r\n                        />\r\n                        <Typography\r\n                          variant=\"caption\"\r\n                          align=\"center\"\r\n                          display=\"block\"\r\n                          style={{ fontWeight: 'bold' }}\r\n                        >\r\n                          TO END OF MINT\r\n                        </Typography>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <MintCountdown\r\n                          key=\"goLive\"\r\n                          date={getCountdownDate(candyMachine)}\r\n                          style={{ justifyContent: 'flex-end' }}\r\n                          status={\r\n                            candyMachine?.state?.isSoldOut ||\r\n                            (endDate && Date.now() > endDate.getTime())\r\n                              ? 'COMPLETED'\r\n                              : isPresale\r\n                              ? 'PRESALE'\r\n                              : 'LIVE'\r\n                          }\r\n                          onComplete={toggleMintButton}\r\n                        />\r\n                        {isPresale &&\r\n                          candyMachine.state.goLiveDate &&\r\n                          candyMachine.state.goLiveDate.toNumber() >\r\n                            new Date().getTime() / 1000 && (\r\n                            <Typography\r\n                              variant=\"caption\"\r\n                              align=\"center\"\r\n                              display=\"block\"\r\n                              style={{ fontWeight: 'bold' }}\r\n                            >\r\n                              UNTIL PUBLIC MINT\r\n                            </Typography>\r\n                          )}\r\n                      </>\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n              )}\r\n              <MintContainer>\r\n                {candyMachine?.state.isActive &&\r\n                candyMachine?.state.gatekeeper &&\r\n                wallet.publicKey &&\r\n                wallet.signTransaction ? (\r\n                  <GatewayProvider\r\n                    wallet={{\r\n                      publicKey:\r\n                        wallet.publicKey ||\r\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                      //@ts-ignore\r\n                      signTransaction: wallet.signTransaction,\r\n                    }}\r\n                    gatekeeperNetwork={\r\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                    }\r\n                    clusterUrl={rpcUrl}\r\n                    handleTransaction={async (transaction: Transaction) => {\r\n                      setIsUserMinting(true);\r\n                      const userMustSign = transaction.signatures.find(sig =>\r\n                        sig.publicKey.equals(wallet.publicKey!),\r\n                      );\r\n                      if (userMustSign) {\r\n                        setAlertState({\r\n                          open: true,\r\n                          message: 'Please sign one-time Civic Pass issuance',\r\n                          severity: 'info',\r\n                        });\r\n                        try {\r\n                          transaction = await wallet.signTransaction!(\r\n                            transaction,\r\n                          );\r\n                        } catch (e) {\r\n                          setAlertState({\r\n                            open: true,\r\n                            message: 'User cancelled signing',\r\n                            severity: 'error',\r\n                          });\r\n                          // setTimeout(() => window.location.reload(), 2000);\r\n                          setIsUserMinting(false);\r\n                          throw e;\r\n                        }\r\n                      } else {\r\n                        setAlertState({\r\n                          open: true,\r\n                          message: 'Refreshing Civic Pass',\r\n                          severity: 'info',\r\n                        });\r\n                      }\r\n                      try {\r\n                        await sendTransaction(\r\n                          props.connection,\r\n                          wallet,\r\n                          transaction,\r\n                          [],\r\n                          true,\r\n                          'confirmed',\r\n                        );\r\n                        setAlertState({\r\n                          open: true,\r\n                          message: 'Please sign minting',\r\n                          severity: 'info',\r\n                        });\r\n                      } catch (e) {\r\n                        setAlertState({\r\n                          open: true,\r\n                          message:\r\n                            'Solana dropped the transaction, please try again',\r\n                          severity: 'warning',\r\n                        });\r\n                        console.error(e);\r\n                        // setTimeout(() => window.location.reload(), 2000);\r\n                        setIsUserMinting(false);\r\n                        throw e;\r\n                      }\r\n                      await onMint();\r\n                    }}\r\n                    broadcastTransaction={false}\r\n                    options={{ autoShowModal: false }}\r\n                  >\r\n                    <MintButton\r\n                      candyMachine={candyMachine}\r\n                      isMinting={isUserMinting}\r\n                      setIsMinting={val => setIsUserMinting(val)}\r\n                      onMint={onMint}\r\n                      isActive={isActive || (isPresale && isWhitelistUser)}\r\n                    />\r\n                  </GatewayProvider>\r\n                ) : (\r\n                  <MintButton\r\n                    candyMachine={candyMachine}\r\n                    isMinting={isUserMinting}\r\n                    setIsMinting={val => setIsUserMinting(val)}\r\n                    onMint={onMint}\r\n                    isActive={isActive || (isPresale && isWhitelistUser)}\r\n                  />\r\n                )}\r\n              </MintContainer>\r\n            </>\r\n          )}\r\n          <Typography\r\n            variant=\"caption\"\r\n            align=\"center\"\r\n            display=\"block\"\r\n            style={{ marginTop: 7, color: 'grey' }}\r\n          >\r\n            Powered by METAPLEX\r\n          </Typography>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={alertState.noHide ? null : 6000}\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst getCountdownDate = (\r\n  candyMachine: CandyMachineAccount,\r\n): Date | undefined => {\r\n  if (\r\n    candyMachine.state.isActive &&\r\n    candyMachine.state.endSettings?.endSettingType.date\r\n  ) {\r\n    return toDate(candyMachine.state.endSettings.number);\r\n  }\r\n\r\n  return toDate(\r\n    candyMachine.state.goLiveDate\r\n      ? candyMachine.state.goLiveDate\r\n      : candyMachine.state.isPresale\r\n      ? new anchor.BN(new Date().getTime() / 1000)\r\n      : undefined,\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import styled from \"styled-components\";\r\n\r\nconst Container = styled(\"div\")`\r\nwidth: 100vw;\r\nheight: 100px;\r\nbackground-color: #192841;\r\n\r\ndisplay: flex;\r\nflex-wrap: wrap;\r\njustify-content:center;\r\nalign-items:center;\r\n\r\nposition: relative;\r\n`\r\nconst Title = styled(\"h1\")`\r\nmargin:0;\r\ncolor : #ff8c00;\r\nfont-family: 'Montserrat Alternates', sans-serif;\r\nwhite-space: nowrap;\r\n`\r\nconst Link = styled(\"a\")`\r\nfont-size: 1.5rem;\r\nmargin: 1rem;\r\ncursor: pointer\r\ncolor: ;\r\nposition: absolute;\r\nright: 5%;\r\n\r\n@media (max-width: 700px){\r\nposition:inital;\r\n\r\n}\r\n`\r\n\r\nconst Navbar = () => {\r\n    return (\r\n<Container>\r\n<Title>\r\n    2d_Jirrafes\r\n</Title>\r\n<Link href=\"#OurVision\">\r\nOur Vision\r\n</Link>\r\n</Container>\r\n\r\n    )\r\n}\r\nexport default Navbar;","import styled from \"styled-components\";\r\n\r\nconst Container = styled(\"div\")`\r\nwidth: 100vw;\r\nheight: auto;\r\nbackground-color: #192841;\r\n\r\nmargin-top:200px;\r\npadding: 10px 0;\r\n\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\n\r\n`\r\nconst ListItem = styled(\"li\")`\r\nmargin: 10px;\r\ncolor: #FFA500;\r\n\r\n`\r\nconst BigTitle = styled(\"h1\")`\r\ncolor: #ff8c00;\r\n`\r\nconst UnderTitle = styled(\"h2\")`\r\ncolor: #ff8c00;\r\n`\r\nconst Roadmap = styled(\"img\")`\r\nwidth :auto;\r\nheight: 1100px;\r\nobject-position: bottom;\r\nmargin-top: 30px;\r\nborder-radius:10%;\r\n`\r\n\r\n\r\nconst OurVision = () => {\r\nreturn(\r\n<Container id=\"OurVision\">\r\n<BigTitle>\r\n    Our Vision\r\n</BigTitle>\r\n<UnderTitle>\r\n   Information\r\n</UnderTitle>\r\n<ul style =  {{ padding: \"0px 20%\"}}>\r\n<ListItem >\r\n    This project consist of 200 pixelated Giraffes on the solana Blockchain ! \r\n</ListItem>\r\n<ListItem>\r\nThis is our FIRST NFT project so ALL wallets who mint will receive whitelist tokens for all future projects released!\r\n\r\n</ListItem>\r\n<ListItem>\r\nThe 2d_Giraffes is the first project of the 2d_Animals series! In the near future we will also release more projects such as the 2d_Bunnies and 2d_Lions!\r\n</ListItem>\r\n<ListItem>\r\n    40% of all secondary sales of our nft will be used for the 2d_Animals DAO. This DAO will be made available after we release our third Project\r\n</ListItem>\r\n\r\n</ul>\r\n<UnderTitle>\r\n    Roadmap\r\n</UnderTitle>\r\n<Roadmap src=\"/Roadmap.png\" alt =\"Roady\"/>\r\n</Container>\r\n\r\n\r\n)\r\n\r\n}\r\nexport default OurVision;","import './App.css';\r\nimport { useMemo } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\nimport Home from './Home';\r\nimport Navbar from './components/Navbar';\r\nimport OurVision from './components/OurVision';\r\nimport { DEFAULT_TIMEOUT } from './connection';\r\nimport { clusterApiUrl } from '@solana/web3.js';\r\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\nimport {\r\n  getPhantomWallet,\r\n  getSlopeWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolletExtensionWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from '@solana/wallet-adapter-react';\r\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\r\n\r\nimport { ThemeProvider, createTheme } from '@material-ui/core';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});\r\n\r\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\r\n  try {\r\n    const candyMachineId = new anchor.web3.PublicKey(\r\n      process.env.REACT_APP_CANDY_MACHINE_ID!,\r\n    );\r\n\r\n    return candyMachineId;\r\n  } catch (e) {\r\n    console.log('Failed to construct CandyMachineId', e);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst candyMachineId = getCandyMachineId();\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(\r\n  rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\r\n);\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSolflareWallet(),\r\n      getSlopeWallet(),\r\n      getSolletWallet({ network }),\r\n      getSolletExtensionWallet({ network }),\r\n    ],\r\n    [],\r\n  );\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect>\r\n          <WalletDialogProvider>\r\n            <Navbar />\r\n            <Home\r\n              candyMachineId={candyMachineId}\r\n              connection={connection}\r\n              txTimeout={DEFAULT_TIMEOUT}\r\n              rpcHost={rpcHost}\r\n            />\r\n            <OurVision />\r\n          </WalletDialogProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import * as anchor from '@project-serum/anchor';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from '@solana/web3.js';\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\r\n  noHide?: boolean;\r\n}\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat('en-US', {\r\n  style: 'decimal',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return '--';\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\r\n);\r\n\r\nexport const getAtaForMint = async (\r\n  mint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      wallet.toBuffer(),\r\n      Buffer.from('gateway'),\r\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n      gatekeeperNetwork.toBuffer(),\r\n    ],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n","import {\r\n  Keypair,\r\n  Commitment,\r\n  Connection,\r\n  RpcResponseAndContext,\r\n  SignatureStatus,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionSignature,\r\n  Blockhash,\r\n  FeeCalculator,\r\n} from '@solana/web3.js';\r\n\r\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\r\n\r\ninterface BlockhashAndFeeCalculator {\r\n  blockhash: Blockhash;\r\n  feeCalculator: FeeCalculator;\r\n}\r\n\r\nexport const DEFAULT_TIMEOUT = 60000;\r\n\r\nexport const getErrorForTransaction = async (\r\n  connection: Connection,\r\n  txid: string,\r\n) => {\r\n  // wait for all confirmation before geting transaction\r\n  await connection.confirmTransaction(txid, 'max');\r\n\r\n  const tx = await connection.getParsedConfirmedTransaction(txid);\r\n\r\n  const errors: string[] = [];\r\n  if (tx?.meta && tx.meta.logMessages) {\r\n    tx.meta.logMessages.forEach(log => {\r\n      const regex = /Error: (.*)/gm;\r\n      let m;\r\n      while ((m = regex.exec(log)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n          regex.lastIndex++;\r\n        }\r\n\r\n        if (m.length > 1) {\r\n          errors.push(m[1]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport enum SequenceType {\r\n  Sequential,\r\n  Parallel,\r\n  StopOnFailure,\r\n}\r\n\r\nexport async function sendTransactionsWithManualRetry(\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[][],\r\n  signers: Keypair[][],\r\n): Promise<(string | undefined)[]> {\r\n  let stopPoint = 0;\r\n  let tries = 0;\r\n  let lastInstructionsLength = null;\r\n  let toRemoveSigners: Record<number, boolean> = {};\r\n  instructions = instructions.filter((instr, i) => {\r\n    if (instr.length > 0) {\r\n      return true;\r\n    } else {\r\n      toRemoveSigners[i] = true;\r\n      return false;\r\n    }\r\n  });\r\n  let ids: string[] = [];\r\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n\r\n  while (stopPoint < instructions.length && tries < 3) {\r\n    instructions = instructions.slice(stopPoint, instructions.length);\r\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n\r\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n    else tries = 0;\r\n\r\n    try {\r\n      if (instructions.length === 1) {\r\n        const id = await sendTransactionWithRetry(\r\n          connection,\r\n          wallet,\r\n          instructions[0],\r\n          filteredSigners[0],\r\n          'single',\r\n        );\r\n        ids.push(id.txid);\r\n        stopPoint = 1;\r\n      } else {\r\n        const { txs } = await sendTransactions(\r\n          connection,\r\n          wallet,\r\n          instructions,\r\n          filteredSigners,\r\n          SequenceType.StopOnFailure,\r\n          'single',\r\n        );\r\n        ids = ids.concat(txs.map(t => t.txid));\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    console.log(\r\n      'Died on ',\r\n      stopPoint,\r\n      'retrying from instruction',\r\n      instructions[stopPoint],\r\n      'instructions length is',\r\n      instructions.length,\r\n    );\r\n    lastInstructionsLength = instructions.length;\r\n  }\r\n\r\n  return ids;\r\n}\r\n\r\nexport const sendTransactions = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructionSet: TransactionInstruction[][],\r\n  signersSet: Keypair[][],\r\n  sequenceType: SequenceType = SequenceType.Parallel,\r\n  commitment: Commitment = 'singleGossip',\r\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\r\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\r\n  block?: BlockhashAndFeeCalculator,\r\n  beforeTransactions: Transaction[] = [],\r\n  afterTransactions: Transaction[] = [],\r\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  const unsignedTxns: Transaction[] = beforeTransactions;\r\n\r\n  if (!block) {\r\n    block = await connection.getRecentBlockhash(commitment);\r\n  }\r\n\r\n  for (let i = 0; i < instructionSet.length; i++) {\r\n    const instructions = instructionSet[i];\r\n    const signers = signersSet[i];\r\n\r\n    if (instructions.length === 0) {\r\n      continue;\r\n    }\r\n\r\n    let transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = block.blockhash;\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n\r\n    unsignedTxns.push(transaction);\r\n  }\r\n  unsignedTxns.push(...afterTransactions);\r\n\r\n  const partiallySignedTransactions = unsignedTxns.filter(t =>\r\n    t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\r\n  );\r\n  const fullySignedTransactions = unsignedTxns.filter(\r\n    t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\r\n  );\r\n  let signedTxns = await wallet.signAllTransactions(\r\n    partiallySignedTransactions,\r\n  );\r\n  signedTxns = fullySignedTransactions.concat(signedTxns);\r\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\r\n\r\n  console.log(\r\n    'Signed txns length',\r\n    signedTxns.length,\r\n    'vs handed in length',\r\n    instructionSet.length,\r\n  );\r\n  for (let i = 0; i < signedTxns.length; i++) {\r\n    const signedTxnPromise = sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: signedTxns[i],\r\n    });\r\n\r\n    if (sequenceType !== SequenceType.Parallel) {\r\n      try {\r\n        await signedTxnPromise.then(({ txid, slot }) =>\r\n          successCallback(txid, i),\r\n        );\r\n        pendingTxns.push(signedTxnPromise);\r\n      } catch (e) {\r\n        console.log('Failed at txn index:', i);\r\n        console.log('Caught failure:', e);\r\n\r\n        failCallback(signedTxns[i], i);\r\n        if (sequenceType === SequenceType.StopOnFailure) {\r\n          return {\r\n            number: i,\r\n            txs: await Promise.all(pendingTxns),\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      pendingTxns.push(signedTxnPromise);\r\n    }\r\n  }\r\n\r\n  if (sequenceType !== SequenceType.Parallel) {\r\n    const result = await Promise.all(pendingTxns);\r\n    return { number: signedTxns.length, txs: result };\r\n  }\r\n\r\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n};\r\n\r\nexport const sendTransaction = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[] | Transaction,\r\n  signers: Keypair[],\r\n  awaitConfirmation = true,\r\n  commitment: Commitment = 'singleGossip',\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction: Transaction;\r\n  if (instructions instanceof Transaction) {\r\n    transaction = instructions;\r\n  } else {\r\n    transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = (\r\n      block || (await connection.getRecentBlockhash(commitment))\r\n    ).blockhash;\r\n\r\n    if (includesFeePayer) {\r\n      transaction.setSigners(...signers.map(s => s.publicKey));\r\n    } else {\r\n      transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n      );\r\n    }\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n      transaction = await wallet.signTransaction(transaction);\r\n    }\r\n  }\r\n\r\n  const rawTransaction = transaction.serialize();\r\n  let options = {\r\n    skipPreflight: true,\r\n    commitment,\r\n  };\r\n\r\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n  let slot = 0;\r\n\r\n  if (awaitConfirmation) {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      DEFAULT_TIMEOUT,\r\n      connection,\r\n      commitment,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    slot = confirmation?.slot || 0;\r\n\r\n    if (confirmation?.err) {\r\n      const errors = await getErrorForTransaction(connection, txid);\r\n\r\n      console.log(errors);\r\n      throw new Error(`Raw transaction ${txid} failed`);\r\n    }\r\n  }\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const sendTransactionWithRetry = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  commitment: Commitment = 'singleGossip',\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n  beforeSend?: () => void,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach(instruction => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n    block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map(s => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  if (beforeSend) {\r\n    beforeSend();\r\n  }\r\n\r\n  const { txid, slot } = await sendSignedTransaction({\r\n    connection,\r\n    signedTransaction: transaction,\r\n  });\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const getUnixTs = () => {\r\n  return new Date().getTime() / 1000;\r\n};\r\n\r\nexport async function sendSignedTransaction({\r\n  signedTransaction,\r\n  connection,\r\n  timeout = DEFAULT_TIMEOUT,\r\n}: {\r\n  signedTransaction: Transaction;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}): Promise<{ txid: string; slot: number }> {\r\n  const rawTransaction = signedTransaction.serialize();\r\n\r\n  const startTime = getUnixTs();\r\n  let slot = 0;\r\n  const txid: TransactionSignature = await connection.sendRawTransaction(\r\n    rawTransaction,\r\n    {\r\n      skipPreflight: true,\r\n    },\r\n  );\r\n\r\n  console.log('Started awaiting confirmation for', txid);\r\n\r\n  let done = false;\r\n  (async () => {\r\n    while (!done && getUnixTs() - startTime < timeout) {\r\n      connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n      });\r\n      await sleep(500);\r\n    }\r\n  })();\r\n  try {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      timeout,\r\n      connection,\r\n      'recent',\r\n      true,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n\r\n    if (confirmation.err) {\r\n      console.error(confirmation.err);\r\n      throw new Error('Transaction failed: Custom instruction error');\r\n    }\r\n\r\n    slot = confirmation?.slot || 0;\r\n  } catch (err: any) {\r\n    console.error('Timeout Error caught', err);\r\n    if (err.timeout) {\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    }\r\n    let simulateResult: SimulatedTransactionResponse | null = null;\r\n    try {\r\n      simulateResult = (\r\n        await simulateTransaction(connection, signedTransaction, 'single')\r\n      ).value;\r\n    } catch (e) {}\r\n    if (simulateResult && simulateResult.err) {\r\n      if (simulateResult.logs) {\r\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n          const line = simulateResult.logs[i];\r\n          if (line.startsWith('Program log: ')) {\r\n            throw new Error(\r\n              'Transaction failed: ' + line.slice('Program log: '.length),\r\n            );\r\n          }\r\n        }\r\n      }\r\n      throw new Error(JSON.stringify(simulateResult.err));\r\n    }\r\n    // throw new Error('Transaction failed');\r\n  } finally {\r\n    done = true;\r\n  }\r\n\r\n  console.log('Latency', txid, getUnixTs() - startTime);\r\n  return { txid, slot };\r\n}\r\n\r\nasync function simulateTransaction(\r\n  connection: Connection,\r\n  transaction: Transaction,\r\n  commitment: Commitment,\r\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n  // @ts-ignore\r\n  transaction.recentBlockhash = await connection._recentBlockhash(\r\n    // @ts-ignore\r\n    connection._disableBlockhashCaching,\r\n  );\r\n\r\n  const signData = transaction.serializeMessage();\r\n  // @ts-ignore\r\n  const wireTransaction = transaction._serialize(signData);\r\n  const encodedTransaction = wireTransaction.toString('base64');\r\n  const config: any = { encoding: 'base64', commitment };\r\n  const args = [encodedTransaction, config];\r\n\r\n  // @ts-ignore\r\n  const res = await connection._rpcRequest('simulateTransaction', args);\r\n  if (res.error) {\r\n    throw new Error('failed to simulate transaction: ' + res.error.message);\r\n  }\r\n  return res.result;\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n  txid: TransactionSignature,\r\n  timeout: number,\r\n  connection: Connection,\r\n  commitment: Commitment = 'recent',\r\n  queryStatus = false,\r\n): Promise<SignatureStatus | null | void> {\r\n  let done = false;\r\n  let status: SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result, context) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log('Rejected via websocket', result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log('Resolved via websocket', result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment,\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error('WS error in setup', txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId])\r\n    connection.removeSignatureListener(subId);\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n}\r\nexport function sleep(ms: number): Promise<void> {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n","import * as anchor from '@project-serum/anchor';\r\n\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\r\nimport {\r\n  SystemProgram,\r\n  Transaction,\r\n  SYSVAR_SLOT_HASHES_PUBKEY,\r\n} from '@solana/web3.js';\r\nimport { sendTransactions, SequenceType } from './connection';\r\n\r\nimport {\r\n  CIVIC,\r\n  getAtaForMint,\r\n  getNetworkExpire,\r\n  getNetworkToken,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from './utils';\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n);\r\n\r\ninterface CandyMachineState {\r\n  authority: anchor.web3.PublicKey;\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  tokenMint: anchor.web3.PublicKey;\r\n  isSoldOut: boolean;\r\n  isActive: boolean;\r\n  isPresale: boolean;\r\n  isWhitelistOnly: boolean;\r\n  goLiveDate: anchor.BN;\r\n  price: anchor.BN;\r\n  gatekeeper: null | {\r\n    expireOnUse: boolean;\r\n    gatekeeperNetwork: anchor.web3.PublicKey;\r\n  };\r\n  endSettings: null | {\r\n    number: anchor.BN;\r\n    endSettingType: any;\r\n  };\r\n  whitelistMintSettings: null | {\r\n    mode: any;\r\n    mint: anchor.web3.PublicKey;\r\n    presale: boolean;\r\n    discountPrice: null | anchor.BN;\r\n  };\r\n  hiddenSettings: null | {\r\n    name: string;\r\n    uri: string;\r\n    hash: Uint8Array;\r\n  };\r\n  retainAuthority: boolean;\r\n}\r\n\r\nexport interface CandyMachineAccount {\r\n  id: anchor.web3.PublicKey;\r\n  program: anchor.Program;\r\n  state: CandyMachineState;\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  queryStatus = false,\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId]) {\r\n    connection.removeSignatureListener(subId);\r\n  }\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n};\r\n\r\nconst createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<CandyMachineAccount> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: 'processed',\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n  return {\r\n    id: candyMachineId,\r\n    program,\r\n    state: {\r\n      authority: state.authority,\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      isSoldOut: itemsRemaining === 0,\r\n      isActive: false,\r\n      isPresale: false,\r\n      isWhitelistOnly: false,\r\n      goLiveDate: state.data.goLiveDate,\r\n      treasury: state.wallet,\r\n      tokenMint: state.tokenMint,\r\n      gatekeeper: state.data.gatekeeper,\r\n      endSettings: state.data.endSettings,\r\n      whitelistMintSettings: state.data.whitelistMintSettings,\r\n      hiddenSettings: state.data.hiddenSettings,\r\n      price: state.data.price,\r\n      retainAuthority: state.data.retainAuthority,\r\n    },\r\n  };\r\n};\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from('edition'),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const getCandyMachineCreator = async (\r\n  candyMachine: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM,\r\n  );\r\n};\r\n\r\nexport const getCollectionPDA = async (\r\n  candyMachineAddress: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from('collection'), candyMachineAddress.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM,\r\n  );\r\n};\r\n\r\nexport interface CollectionData {\r\n  mint: anchor.web3.PublicKey;\r\n  candyMachine: anchor.web3.PublicKey;\r\n}\r\n\r\nexport const getCollectionAuthorityRecordPDA = async (\r\n  mint: anchor.web3.PublicKey,\r\n  newAuthority: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from('collection_authority'),\r\n        newAuthority.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport type SetupState = {\r\n  mint: anchor.web3.Keypair;\r\n  userTokenAccount: anchor.web3.PublicKey;\r\n  transaction: string;\r\n};\r\n\r\nexport const createAccountsForMint = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey,\r\n): Promise<SetupState> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const signers: anchor.web3.Keypair[] = [mint];\r\n  const instructions = [\r\n    anchor.web3.SystemProgram.createAccount({\r\n      fromPubkey: payer,\r\n      newAccountPubkey: mint.publicKey,\r\n      space: MintLayout.span,\r\n      lamports:\r\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n          MintLayout.span,\r\n        ),\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    Token.createInitMintInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      0,\r\n      payer,\r\n      payer,\r\n    ),\r\n    createAssociatedTokenAccountInstruction(\r\n      userTokenAccountAddress,\r\n      payer,\r\n      payer,\r\n      mint.publicKey,\r\n    ),\r\n    Token.createMintToInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      userTokenAccountAddress,\r\n      payer,\r\n      [],\r\n      1,\r\n    ),\r\n  ];\r\n\r\n  return {\r\n    mint: mint,\r\n    userTokenAccount: userTokenAccountAddress,\r\n    transaction: (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        [instructions],\r\n        [signers],\r\n        SequenceType.StopOnFailure,\r\n        'singleGossip',\r\n        () => {},\r\n        () => false,\r\n        undefined,\r\n        [],\r\n        [],\r\n      )\r\n    ).txs[0].txid,\r\n  };\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey,\r\n  beforeTransactions: Transaction[] = [],\r\n  afterTransactions: Transaction[] = [],\r\n  setupState?: SetupState,\r\n): Promise<string[]> => {\r\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const userPayingAccountAddress = candyMachine.state.tokenMint\r\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n    : payer;\r\n\r\n  const candyMachineAddress = candyMachine.id;\r\n  const remainingAccounts = [];\r\n  const cleanupInstructions = [];\r\n  const instructions = [];\r\n  const signers: anchor.web3.Keypair[] = [];\r\n  console.log('SetupState: ', setupState);\r\n  if (!setupState) {\r\n    signers.push(mint);\r\n    instructions.push(\r\n      ...[\r\n        anchor.web3.SystemProgram.createAccount({\r\n          fromPubkey: payer,\r\n          newAccountPubkey: mint.publicKey,\r\n          space: MintLayout.span,\r\n          lamports:\r\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n              MintLayout.span,\r\n            ),\r\n          programId: TOKEN_PROGRAM_ID,\r\n        }),\r\n        Token.createInitMintInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          mint.publicKey,\r\n          0,\r\n          payer,\r\n          payer,\r\n        ),\r\n        createAssociatedTokenAccountInstruction(\r\n          userTokenAccountAddress,\r\n          payer,\r\n          payer,\r\n          mint.publicKey,\r\n        ),\r\n        Token.createMintToInstruction(\r\n          TOKEN_PROGRAM_ID,\r\n          mint.publicKey,\r\n          userTokenAccountAddress,\r\n          payer,\r\n          [],\r\n          1,\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n\r\n  if (candyMachine.state.gatekeeper) {\r\n    remainingAccounts.push({\r\n      pubkey: (\r\n        await getNetworkToken(\r\n          payer,\r\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n        )\r\n      )[0],\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.gatekeeper.expireOnUse) {\r\n      remainingAccounts.push({\r\n        pubkey: CIVIC,\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: (\r\n          await getNetworkExpire(\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n          )\r\n        )[0],\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n    }\r\n  }\r\n  if (candyMachine.state.whitelistMintSettings) {\r\n    const mint = new anchor.web3.PublicKey(\r\n      candyMachine.state.whitelistMintSettings.mint,\r\n    );\r\n\r\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n    remainingAccounts.push({\r\n      pubkey: whitelistToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\r\n\r\n      remainingAccounts.push({\r\n        pubkey: mint,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: whitelistBurnAuthority.publicKey,\r\n        isWritable: false,\r\n        isSigner: true,\r\n      });\r\n      signers.push(whitelistBurnAuthority);\r\n      const exists =\r\n        await candyMachine.program.provider.connection.getAccountInfo(\r\n          whitelistToken,\r\n        );\r\n      if (exists) {\r\n        instructions.push(\r\n          Token.createApproveInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            whitelistToken,\r\n            whitelistBurnAuthority.publicKey,\r\n            payer,\r\n            [],\r\n            1,\r\n          ),\r\n        );\r\n        cleanupInstructions.push(\r\n          Token.createRevokeInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            whitelistToken,\r\n            payer,\r\n            [],\r\n          ),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  if (candyMachine.state.tokenMint) {\r\n    const transferAuthority = anchor.web3.Keypair.generate();\r\n\r\n    signers.push(transferAuthority);\r\n    remainingAccounts.push({\r\n      pubkey: userPayingAccountAddress,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: transferAuthority.publicKey,\r\n      isWritable: false,\r\n      isSigner: true,\r\n    });\r\n\r\n    instructions.push(\r\n      Token.createApproveInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        userPayingAccountAddress,\r\n        transferAuthority.publicKey,\r\n        payer,\r\n        [],\r\n        candyMachine.state.price.toNumber(),\r\n      ),\r\n    );\r\n    cleanupInstructions.push(\r\n      Token.createRevokeInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        userPayingAccountAddress,\r\n        payer,\r\n        [],\r\n      ),\r\n    );\r\n  }\r\n  const metadataAddress = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n    candyMachineAddress,\r\n  );\r\n\r\n  console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\r\n  instructions.push(\r\n    await candyMachine.program.instruction.mintNft(creatorBump, {\r\n      accounts: {\r\n        candyMachine: candyMachineAddress,\r\n        candyMachineCreator,\r\n        payer: payer,\r\n        wallet: candyMachine.state.treasury,\r\n        mint: mint.publicKey,\r\n        metadata: metadataAddress,\r\n        masterEdition,\r\n        mintAuthority: payer,\r\n        updateAuthority: payer,\r\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        systemProgram: SystemProgram.programId,\r\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\r\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n      },\r\n      remainingAccounts:\r\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n    }),\r\n  );\r\n\r\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\r\n  const collectionPDAAccount =\r\n    await candyMachine.program.provider.connection.getAccountInfo(\r\n      collectionPDA,\r\n    );\r\n\r\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\r\n    try {\r\n      const collectionData =\r\n        (await candyMachine.program.account.collectionPda.fetch(\r\n          collectionPDA,\r\n        )) as CollectionData;\r\n      console.log(collectionData);\r\n      const collectionMint = collectionData.mint;\r\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\r\n        collectionMint,\r\n        collectionPDA,\r\n      );\r\n      console.log(collectionMint);\r\n      if (collectionMint) {\r\n        const collectionMetadata = await getMetadata(collectionMint);\r\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\r\n        console.log('Collection PDA: ', collectionPDA.toBase58());\r\n        console.log('Authority: ', candyMachine.state.authority.toBase58());\r\n        instructions.push(\r\n          await candyMachine.program.instruction.setCollectionDuringMint({\r\n            accounts: {\r\n              candyMachine: candyMachineAddress,\r\n              metadata: metadataAddress,\r\n              payer: payer,\r\n              collectionPda: collectionPDA,\r\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n              collectionMint,\r\n              collectionMetadata,\r\n              collectionMasterEdition,\r\n              authority: candyMachine.state.authority,\r\n              collectionAuthorityRecord,\r\n            },\r\n          }),\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  const instructionsMatrix = [instructions, cleanupInstructions];\r\n  const signersMatrix = [signers, []];\r\n\r\n  try {\r\n    return (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        instructionsMatrix,\r\n        signersMatrix,\r\n        SequenceType.StopOnFailure,\r\n        'singleGossip',\r\n        () => {},\r\n        () => false,\r\n        undefined,\r\n        beforeTransactions,\r\n        afterTransactions,\r\n      )\r\n    ).txs.map(t => t.txid);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n  return [];\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n"],"sourceRoot":""}